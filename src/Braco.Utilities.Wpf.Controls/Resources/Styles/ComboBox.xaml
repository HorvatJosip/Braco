<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Braco.Utilities.Wpf.Controls"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
                    xmlns:utils="clr-namespace:Braco.Utilities.Wpf;assembly=Braco.Utilities.Wpf">
	<!-- ComboBox Editable ToggleButton -->
	<Style x:Key="EditableComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="ClickMode" Value="Press" />
		<Setter Property="local:SetupOnClickProperty.Value" Value="True" />
		<Setter Property="local:KeyReactiveProperty.Value" Value="True" />
		<Setter Property="local:SelectionMapperProperty.Value" Value="True" />
		<Setter Property="local:LostFocusFillerProperty.Value" Value="ConstructNewItem" />
		<Setter Property="local:AutoCompleteProperty.Value" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="templateRoot"
					        Background="{DynamicResource brushSecondary}"
					        BorderThickness="0" SnapsToDevicePixels="true">
						<Grid>
							<TextBox Tag="{utils:RelativeBinding Tag, {x:Type ComboBox}}" />

							<Border x:Name="splitBorder"
							        Margin="0" HorizontalAlignment="Right" BorderThickness="0"
							        SnapsToDevicePixels="true">
								<local:ImageButton x:Name="arrow"
								                   Height="30" ButtonSize="15"
								                   FileName="{x:Static local:ResourceKeys.DownIcon}"
								                   KeyboardNavigation.TabNavigation="None" />
							</Border>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.5" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Cursor" Value="Hand" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ComboBox ReadOnly ToggleButton -->
	<Style x:Key="ReadOnlyComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="ClickMode" Value="Press" />
		<Setter Property="local:SetupOnClickProperty.Value" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="templateRoot"
					        Padding="9"
					        Background="{DynamicResource brushSecondary}"
					        BorderBrush="{DynamicResource brushPrimary}"
					        BorderThickness="0 0 0 3" SnapsToDevicePixels="true">
						<Border x:Name="splitBorder"
						        Margin="0" HorizontalAlignment="Right" BorderThickness="0"
						        SnapsToDevicePixels="true">
							<local:ImageButton x:Name="arrow"
							                   Height="30"
							                   FileName="{x:Static local:ResourceKeys.DownIcon}"
							                   KeyboardNavigation.TabNavigation="None" />
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Opacity" Value="0.5" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Cursor" Value="Hand" />
							<Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource brushPrimaryHover}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ComboBox -->
	<Style TargetType="{x:Type ComboBox}">
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />

		<!-- Combo box item container -->
		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type ComboBoxItem}">
					<Setter Property="BorderThickness" Value="0" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type ComboBoxItem}">
								<Border x:Name="TheBorder"
								        Padding="{TemplateBinding Padding}"
								        Background="{TemplateBinding Background}"
								        BorderBrush="{TemplateBinding BorderBrush}"
								        BorderThickness="{TemplateBinding BorderThickness}"
								        SnapsToDevicePixels="True">
									<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</Border>
								<ControlTemplate.Triggers>
									<Trigger Property="IsHighlighted" Value="true">
										<Setter Property="Foreground" Value="{DynamicResource brushSecondary}" />
										<Setter Property="Background" Value="{DynamicResource brushPrimaryHover}" />
									</Trigger>
									<Trigger Property="IsEnabled" Value="false">
										<Setter Property="Opacity" Value="0.5" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>

		<!-- Content display -->
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<Border x:Name="TheBorder" Padding="5">
						<TextBlock>
							<TextBlock.Text>
								<MultiBinding Converter="{utils:ComboBoxItemConverter}">
									<Binding Path="." />

									<utils:RelativeBinding AncestorType="{x:Type ComboBox}" Path="." />
								</MultiBinding>
							</TextBlock.Text>
						</TextBlock>
					</Border>
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<!-- ComboBox display -->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
						</Grid.ColumnDefinitions>
						<Popup x:Name="PART_Popup"
						       Grid.ColumnSpan="2" Margin="1" AllowsTransparency="true"
						       IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						       Placement="Bottom"
						       PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
							<theme:SystemDropShadowChrome x:Name="shadow"
							                              MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
							                              MaxHeight="{TemplateBinding MaxDropDownHeight}"
							                              Color="Transparent">
								<Border x:Name="dropDownBorder"
								        Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
								        BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
								        BorderThickness="1">
									<ScrollViewer x:Name="DropDownScrollViewer">
										<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
											<Canvas x:Name="canvas"
											        Width="0" Height="0" HorizontalAlignment="Left"
											        VerticalAlignment="Top">
												<Rectangle x:Name="opaqueRect"
												           Width="{Binding ActualWidth, ElementName=dropDownBorder}"
												           Height="{Binding ActualHeight, ElementName=dropDownBorder}"
												           Fill="{Binding Background, ElementName=dropDownBorder}" />
											</Canvas>
											<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
										</Grid>
									</ScrollViewer>
								</Border>
							</theme:SystemDropShadowChrome>
						</Popup>
						<ToggleButton x:Name="toggleButton"
						              Grid.ColumnSpan="2"
						              Background="{TemplateBinding Background}"
						              BorderBrush="{TemplateBinding BorderBrush}"
						              BorderThickness="{TemplateBinding BorderThickness}"
						              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						              Style="{utils:RelativeBinding IsEditable,
						                                            {x:Type ComboBox},
						                                            Converter={local:ComboBoxToggleButtonStyleConverter}}" />
						<ContentPresenter x:Name="contentPresenter"
						                  Margin="{TemplateBinding Padding}"
						                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						                  Content="{TemplateBinding SelectionBoxItem}"
						                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
						                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
						                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
						                  IsHitTestVisible="false"
						                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
							<Setter TargetName="shadow" Property="Margin" Value="0 0 5 5" />
							<Setter TargetName="shadow" Property="Color" Value="#71000000" />
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="dropDownBorder" Property="Height" Value="95" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsGrouping" Value="true" />
								<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</MultiTrigger>
						<Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
							<Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
							<Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="Purple" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>